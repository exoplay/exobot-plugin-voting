require("source-map-support").install(),require("regenerator-runtime/runtime"),function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,t,n){Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=1)}([function(e,t){e.exports=require("@exoplay/exobot")},function(e,t,n){"use strict";function r(e){return function(){var t=e.apply(this,arguments);return new Promise(function(e,n){function r(o,i){try{var a=t[o](i),s=a.value}catch(e){return void n(e)}return a.done?void e(s):Promise.resolve(s).then(function(e){r("next",e)},function(e){r("throw",e)})}return r("next")})}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function s(e,t,n,r,o){var i={};return Object.keys(r).forEach(function(e){i[e]=r[e]}),i.enumerable=!!i.enumerable,i.configurable=!!i.configurable,("value"in i||i.initializer)&&(i.writable=!0),i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i),o&&void 0!==i.initializer&&(i.value=i.initializer?i.initializer.call(o):void 0,i.initializer=void 0),void 0===i.initializer&&(Object.defineProperty(e,t,i),i=null),i}var u=n(0);n.n(u);n.d(t,"Voting",function(){return N});var l,c,p,h,d,f,b,v,m,y,g,k,x,I,w,D,q,V,O,R,$,j,P,z,C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},N=(l=n.i(u.permissionGroup)("public"),c=n.i(u.help)("Votes list - Lists all votes that are open in channel and 3 recent closed votes"),p=n.i(u.respond)(/^votes list/i),h=n.i(u.permissionGroup)("manageVotes"),d=n.i(u.help)("Votes delete quickpoll - Closes open quickpoll in channel\nVotes delete measure $id - Closes measure $id in channel"),f=n.i(u.respond)(/^votes delete\s+(quickpoll|measure)\s*(?:\$(\w{3}))?/i),b=n.i(u.permissionGroup)("public"),v=n.i(u.help)("Votes delete quickpoll - Closes open quickpoll in channel\nVotes delete measure $id - Closes measure $id in channel"),m=n.i(u.respond)(/^votes delete\s+(quickpoll|measure)\s*(?:\$(\w{3}))?/i),y=n.i(u.permissionGroup)("manageVotes"),g=n.i(u.help)("Votes close quickpoll - Closes open quickpoll in channel\nVotes close measure $id - Closes measure $id in channel"),k=n.i(u.respond)(/^votes close\s+(quickpoll|measure)\s*(?:\$(\w{3}))?/i),x=n.i(u.permissionGroup)("public"),I=n.i(u.help)("Votes close quickpoll - Closes open quickpoll in channel\nVotes close measure $id - Closes measure $id in channel"),w=n.i(u.respond)(/^votes close\s+(quickpoll|measure)\s*(?:\$(\w{3}))?/i),D=n.i(u.permissionGroup)("public"),q=n.i(u.help)("Votes results [$id] - Outputs the results of quickpoll or measure with optional $id"),V=n.i(u.respond)(/^votes results\s*(?:\$(\w{3}))?/i),O=n.i(u.permissionGroup)("createVotes"),R=n.i(u.help)('Votes create quickpoll "Your question" - Creates quickpoll in channel\nVotes create measure "Your Question"|"Option 1"|"Option 2"|[other] - Creates measure in channel with options and optional other entry\n'),$=n.i(u.respond)(/^votes create\s+(quickpoll|measure)\s+(.+)/i),j=n.i(u.permissionGroup)("public"),P=n.i(u.listen)(/^vote[^s]\s*(?:\$(\w{3})\s*)?([^\$]{1}.*)?/i),z=function(e){function t(){var n,r,a;o(this,t);for(var s=arguments.length,u=Array(s),l=0;l<s;l++)u[l]=arguments[l];return n=r=i(this,e.call.apply(e,[this].concat(u))),r.name="voting",r.defaultDatabase={quickpoll:{votes:[],poll:{open:!1,channelID:"",question:"",timeout:0,userID:""}},voting:{votes:[],measures:[]}},r._requiresDatabase=!0,r.propTypes={},a=n,i(r,a)}return a(t,e),t.prototype.listVotes=function(){function e(e,n){return t.apply(this,arguments)}var t=r(regeneratorRuntime.mark(function e(t,n){var r,o,i,a,s;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.databaseInitialized();case 2:if(r=[],o=[],i=this.bot.db.get("quickpoll.poll").value(),a=0,i.open===!0&&i.channelID===n.channel.id&&(r.push("Open quickpoll: "+i.question+"\n"),a++),r.push("Open Polls:"),this.bot.db.get("voting.measures").filter({channelID:n.channel.id}).forEach(function(e){var t=("000"+e.id.toString(36)).slice(-3);e.open?(a++,r.push("Measure $"+t+": "+e.text)):(a++,o.push("Measure $"+t+": "+e.text))}).value(),s=o.slice(o.length-3).join("\n"),!(a>0)){e.next=12;break}return e.abrupt("return",r.join("\n")+"\n\nClosed Polls:\n"+s);case 12:return e.abrupt("return","No quickpolls or measures found in this channel");case 13:case"end":return e.stop()}},e,this)}));return e}(),t.prototype.deleteVoteAdmin=function(){function e(e,n){return t.apply(this,arguments)}var t=r(regeneratorRuntime.mark(function e(t,n){var r,o,i=t[1],a=t[2];return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.databaseInitialized();case 2:if("quickpoll"!==i){e.next=6;break}if(r=this.bot.db.get("quickpoll.poll").value(),r.userID===n.user.id){e.next=6;break}return e.abrupt("return",this.deleteVote(i,a,n));case 6:if(o=this.bot.db.get("voting.measures").filter({id:parseInt(a,36),channelID:n.channel.id}).first().value(),o.channelID!==n.channel.id||o.userID===n.user.id){e.next=9;break}return e.abrupt("return",this.deleteVote(i,a,n));case 9:case"end":return e.stop()}},e,this)}));return e}(),t.prototype.deleteVoteOwned=function(){function e(e,n){return t.apply(this,arguments)}var t=r(regeneratorRuntime.mark(function e(t,n){var r,o,i=t[1],a=t[2];return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.databaseInitialized();case 2:if("quickpoll"!==i){e.next=6;break}if(r=this.bot.db.get("quickpoll.poll").value(),r.userID!==n.user.id||r.channelID!==n.channel.id){e.next=6;break}return e.abrupt("return",this.deleteVote(i,a,n));case 6:if(o=this.bot.db.get("voting.measures").filter({id:parseInt(a,36),channelID:n.channel.id}).first().value(),o.channelID!==n.channel.id||o.userID!==n.user.id){e.next=9;break}return e.abrupt("return",this.deleteVote(i,a,n));case 9:case"end":return e.stop()}},e,this)}));return e}(),t.prototype.deleteVote=function(){function e(e,n,r){return t.apply(this,arguments)}var t=r(regeneratorRuntime.mark(function e(t,n,r){var o,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if("quickpoll"!==t){e.next=6;break}if(o=this.bot.db.get("quickpoll.poll").value(),o.channelID!==r.channel.id){e.next=5;break}return this.initQuickpoll(),e.abrupt("return","Quickpoll has been deleted.");case 5:return e.abrupt("return","No quickpoll open in this channel.");case 6:return i=parseInt(n,36),this.bot.db.get("voting.measures").remove(function(e){return e.id===i}).value(),this.bot.db.get("voting.votes").remove(function(e){return e.measureID===i}).value(),e.abrupt("return","Measure "+n+" deleted.");case 10:case"end":return e.stop()}},e,this)}));return e}(),t.prototype.closeVoteAdmin=function(){function e(e,n){return t.apply(this,arguments)}var t=r(regeneratorRuntime.mark(function e(t,n){var r,o,i=t[1],a=t[2];return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.databaseInitialized();case 2:if("quickpoll"!==i){e.next=6;break}if(r=this.bot.db.get("quickpoll.poll").value(),r.userID===n.user.id||r.channelID!==n.channel.id){e.next=6;break}return e.abrupt("return",this.closeVote(i,a,n));case 6:if(o=this.bot.db.get("voting.measures").filter({id:parseInt(a,36),channelID:n.channel.id}).first().value(),o.channelID!==n.channel.id||o.userID===n.user.id){e.next=9;break}return e.abrupt("return",this.closeVote(i,a,n));case 9:case"end":return e.stop()}},e,this)}));return e}(),t.prototype.closeVoteOwned=function(){function e(e,n){return t.apply(this,arguments)}var t=r(regeneratorRuntime.mark(function e(t,n){var r,o,i=t[1],a=t[2];return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.databaseInitialized();case 2:if("quickpoll"!==i){e.next=6;break}if(r=this.bot.db.get("quickpoll.poll").value(),r.userID!==n.user.id||r.channelID!==n.channel.id){e.next=6;break}return e.abrupt("return",this.closeVote(i,a,n));case 6:if(o=this.bot.db.get("voting.measures").filter({id:parseInt(a,36),channelID:n.channel.id}).first().value(),o.channelID!==n.channel.id||o.userID!==n.user.id){e.next=9;break}return e.abrupt("return",this.closeVote(i,a,n));case 9:case"end":return e.stop()}},e,this)}));return e}(),t.prototype.closeVote=function(){function e(e,n,r){return t.apply(this,arguments)}var t=r(regeneratorRuntime.mark(function e(t,n,r){var o,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if("quickpoll"!==t){e.next=6;break}if(o=this.bot.db.get("quickpoll.poll").value(),o.open!==!0||o.channelID!==r.channel.id){e.next=5;break}return this.bot.db.set("quickpoll.poll.open",!1).value(),e.abrupt("return",'Poll "'+o.question+'" has been closed.');case 5:return e.abrupt("return","No quickpoll open in this channel.");case 6:if(i=this.bot.db.get("voting.measures").filter({id:parseInt(n,36),channelID:r.channel.id}).first().value(),i.open!==!0||i.channelID!==r.channel.id){e.next=10;break}return i.open=!1,e.abrupt("return",'Measure "'+i.text+'" has been closed.');case 10:return e.abrupt("return","No vote with that ID open in this channel");case 11:case"end":return e.stop()}},e,this)}));return e}(),t.prototype.results=function(){function e(e,n){return t.apply(this,arguments)}var t=r(regeneratorRuntime.mark(function e(t,n){var r,o,i,a,s,u,l,c=t[1];return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=void 0,o=[],i=void 0,e.next=5,this.databaseInitialized();case 5:if(!c){e.next=11;break}a=parseInt(c,36),s=this.bot.db.get("voting.measures").filter({id:a,channelID:n.channel.id}).first().value(),s&&(r=this.bot.db.get("voting.votes").filter({measureID:a,channelID:n.channel.id}).countBy(function(e){return e.response}).value(),i="Voting results for $"+c+" "+s.text+":\n"),e.next=16;break;case 11:if(u=this.bot.db.get("quickpoll.poll").value(),u.channelID===n.channel.id){e.next=14;break}return e.abrupt("return","No Quickpoll running for "+n.channel.name);case 14:r=this.bot.db.get("quickpoll.votes").filter({channelID:n.channel.id}).countBy(function(e){return e.response}).value(),i='Voting results for "'+u.question+'":\n';case 16:if(0!==Object.keys(r).length){e.next=18;break}return e.abrupt("return","No votes yet");case 18:for(l in r)r.hasOwnProperty(l)&&o.push({key:l,value:r[l]});return o.length>1&&o.sort(function(e,t){return t.value-e.value}),o.forEach(function(e){i+=e.key+" recieved "+e.value+" point"+(1===e.value?"":"s")+"\n"}),e.abrupt("return",i);case 22:case"end":return e.stop()}},e,this)}));return e}(),t.prototype.createVote=function(){function e(e,n){return t.apply(this,arguments)}var t=r(regeneratorRuntime.mark(function e(t,n){var r,o,i,a,s,u=t[1],l=t[2];return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.databaseInitialized();case 2:if("quickpoll"!==u){e.next=7;break}if(this.bot.db.get("quickpoll.poll.open").value()!==!1){e.next=6;break}return this.initQuickpoll(!0,n.channel.id,n.user.id,l),e.abrupt("return","Quickpoll created: "+l+' type "vote <your vote>" to respond.');case 6:return e.abrupt("return","Cannot create quickpoll.  Quickpoll already in progress.");case 7:return r=l.split("|"),o={id:this.getNextMeasureID(),text:r[0],choices:r.slice(1),allowOther:r.includes("other"),open:!0,timeout:0,channelID:n.channel.id,userID:n.user.id},i=("000"+o.id.toString(36)).slice(-3),this.bot.db.get("voting.measures").push(o).value(),a="Measure created: "+o.text+" Choices:\n",s=0,o.choices.forEach(function(e){"other"!==e&&(a+=++s+".\t"+e+"\n")}),a+='Type "vote $'+i+" 1-"+s+'"',a+=""+(o.allowOther?' or "vote $'+i+' <your vote>" ':" "),a+="to place your vote.",e.abrupt("return",a);case 18:case"end":return e.stop()}},e,this)}));return e}(),t.prototype.vote=function(){function e(e,n){return t.apply(this,arguments)}var t=r(regeneratorRuntime.mark(function e(t,n){var r,o,i,a,s,u,l,c,p,h,d=this,f=(t[0],t[1]),b=t[2];return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.databaseInitialized();case 2:if(!f||!b){e.next=29;break}if(r=parseInt(b)-1,o=parseInt(f,36),i=void 0,a=this.bot.db.get("voting.measures").filter({id:o,open:!0,channelID:n.channel.id}).first().value(),!a){e.next=26;break}if(s=a.choices.length-(a.allowOther?2:1),isNaN(r)){e.next=17;break}if(!(r>=0&&r<=s)){e.next=14;break}i=a.choices[r],e.next=15;break;case 14:return e.abrupt("return","Invaid vote option "+b);case 15:e.next=22;break;case 17:if(!a.allowOther){e.next=21;break}i=b,e.next=22;break;case 21:return e.abrupt("return","Invalid vote option "+b);case 22:u=this.buildVote(!1,o,i,n.user.id,n.channel.id),this.bot.db.get("voting.votes").push(u).value(),e.next=27;break;case 26:return e.abrupt("return","No vote with that ID open in this channel");case 27:e.next=42;break;case 29:if(!b){e.next=34;break}l=this.bot.db.get("quickpoll.poll").value(),l.open===!0&&l.channelID===n.channel.id&&(c=this.buildVote(!0,"",b,n.user.id,n.channel.id),this.bot.db.get("quickpoll.votes").push(c).value()),e.next=42;break;case 34:if(!f){e.next=38;break}if(p=function(){var e=d.bot.db.get("voting.measures").filter({id:parseInt(f,36),open:!0,channelID:n.channel.id}).first().value(),t=("000"+e.id.toString(36)).slice(-3),r="Measure: "+e.text+" Choices:\n",o=1;return e.choices.forEach(function(e){"other"!==e&&(r+=o++ +".\t"+e+"\n")}),r+='Type "vote $'+t+" 1-"+(o-1)+'""',e.allowOther&&(r+=' or "vote $'+t+' <your vote>"'),r+=" to place your vote.",{v:r}}(),"object"!==("undefined"==typeof p?"undefined":C(p))){e.next=38;break}return e.abrupt("return",p.v);case 38:if(h=this.bot.db.get("quickpoll.poll").value(),h.channelID===n.channel.id&&h.open){e.next=41;break}return e.abrupt("return","No Quickpoll running for "+n.channel.name);case 41:return e.abrupt("return","Quickpoll: "+h.question+' type "vote your response" to respond.');case 42:case"end":return e.stop()}},e,this)}));return e}(),t.prototype.buildVote=function(e,t,n,r,o){return e?{response:n,user:r,timestamp:Date.now(),channelID:o}:{measureID:t,response:n,user:r,timestamp:Date.now(),channelID:o}},t.prototype.getNextMeasureID=function(){var e=this.bot.db.get("voting.measures").maxBy("id").value();return e?e.id+1:1},t.prototype.initVoting=function(){function e(){return t.apply(this,arguments)}var t=r(regeneratorRuntime.mark(function e(){var t,n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.databaseInitialized();case 2:this.bot.db.get("voting").value(),t=this.bot.db.get("voting.votes").first().value(),n=this.bot.db.get("voting.measures").first().value(),"undefined"==typeof t&&this.bot.db.set("voting.votes",[]).value(),"undefined"==typeof n&&this.bot.db.set("voting.measures",[]).value();case 7:case"end":return e.stop()}},e,this)}));return e}(),t.prototype.initQuickpoll=function(){function e(e,n,r,o,i){return t.apply(this,arguments)}var t=r(regeneratorRuntime.mark(function e(t,n,r,o,i){var a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.databaseInitialized();case 2:a={open:t||!1,channelID:n||"",question:o||"",timeout:i||0,userID:r||""},this.bot.db.set("quickpoll.poll",a).value(),this.bot.db.set("quickpoll.votes",[]).value();case 5:case"end":return e.stop()}},e,this)}));return e}(),t}(u.ChatPlugin),s(z.prototype,"listVotes",[l,c,p],Object.getOwnPropertyDescriptor(z.prototype,"listVotes"),z.prototype),s(z.prototype,"deleteVoteAdmin",[h,d,f],Object.getOwnPropertyDescriptor(z.prototype,"deleteVoteAdmin"),z.prototype),s(z.prototype,"deleteVoteOwned",[b,v,m],Object.getOwnPropertyDescriptor(z.prototype,"deleteVoteOwned"),z.prototype),s(z.prototype,"closeVoteAdmin",[y,g,k],Object.getOwnPropertyDescriptor(z.prototype,"closeVoteAdmin"),z.prototype),s(z.prototype,"closeVoteOwned",[x,I,w],Object.getOwnPropertyDescriptor(z.prototype,"closeVoteOwned"),z.prototype),s(z.prototype,"results",[D,q,V],Object.getOwnPropertyDescriptor(z.prototype,"results"),z.prototype),s(z.prototype,"createVote",[O,R,$],Object.getOwnPropertyDescriptor(z.prototype,"createVote"),z.prototype),s(z.prototype,"vote",[j,P],Object.getOwnPropertyDescriptor(z.prototype,"vote"),z.prototype),z)}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,